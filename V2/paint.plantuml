@startuml
!define AbstractFactory IconFactory
!define ConcreteFactory PokerFaceIconFactory
!define ConcreteFactory FlowerIconFactory
!define ConcreteFactory NullIconFactory
!define ConcreteFactory myIconFactory
!define AbstractProduct StyleFactory
!define Product Tree_Leaf
!define Product Tree_Node
!define Product Rectangle_Leaf
!define Product Rectangle_Node
!define Builder FunnyJsonExplorerBulider

abstract class IconFactory {
    +get_middle_icon() : String
    +get_leaf_icon() : String
}

class PokerFaceIconFactory {
    +get_middle_icon() : String
    +get_leaf_icon() : String
}

class FlowerIconFactory {
    +get_middle_icon() : String
    +get_leaf_icon() : String
}

class NullIconFactory {
    +get_middle_icon() : String
    +get_leaf_icon() : String
}

class myIconFactory {
    -middle_icon : String
    -leaf_icon : String
    +get_middle_icon() : String
    +get_leaf_icon() : String
}

abstract class StyleFactory {
    -name : String
    -icon_factory : IconFactory
    -children : List~StyleFactory~
    +add(component: StyleFactory)
    +draw(level: int, is_last: boolean, arg_list: List~int~)
}


class Tree_Leaf  {
    -value : Any
    +draw(level: int, is_last: boolean, arg_list: List~int~)
}

class Tree_Node  {
    +draw(level: int, is_last: boolean, arg_list: List~int~)
}



class Rectangle_Leaf  {
    -value : Any
    +draw(level: int, is_last: boolean, arg_list: List~int~)
}

class Rectangle_Node {
    +draw(level: int, is_last: boolean, arg_list: List~int~)
}

class FunnyJsonExplorerBulider {
    -json_data : JSON
    -LeafStyle_factory : StyleFactory
    -NodeStyle_factory : StyleFactory
    -icon_factory : IconFactory
    +with_style_and_icon_factory(LeafStyle_factory: StyleFactory, NodeStyle_factory: StyleFactory, icon_factory: IconFactory)
    +show()
    +build(name: String, data: Any) : StyleFactory
}

IconFactory <|-- PokerFaceIconFactory
IconFactory <|-- FlowerIconFactory
IconFactory <|-- NullIconFactory
IconFactory <|-- myIconFactory

StyleFactory <|-- TreeFactory
TreeFactory <|-- Tree_Leaf
TreeFactory <|-- Tree_Node
TreeFactory --* Tree_Node

StyleFactory <|-- RectangleFactory
RectangleFactory <|-- Rectangle_Leaf
RectangleFactory <|-- Rectangle_Node
RectangleFactory --* Rectangle_Node

FunnyJsonExplorerBulider ..> StyleFactory
FunnyJsonExplorerBulider ..> IconFactory
@enduml